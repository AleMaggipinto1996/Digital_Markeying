title="Sbilanciamento Classi") +
theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(panel.border = element_blank())+theme(panel.background = element_blank())+theme(axis.line = element_line(colour = "black"))
churn0 <- train %>% filter(CHURN == 0) #contiene 54855 righe
churn1 <- train %>% filter(CHURN == 1) #contiene 33334 righe
balance <- churn1[sample(nrow(churn1), nrow(churn0), replace = TRUE),]
train_balanced <- rbind(balance, churn0)
train <- train_balanced
table(train$CHURN)
#1. RANDOM FOREST
memory.limit(100000)
tree_rf <- randomForest(CHURN~.,data=train,ntree=100)
print(tree_rf)
#Prediction Random Forest
pred_rf<-rpart.predict(tree_rf, test[,-15], type = "class")
prob_rf <- rpart.predict(tree_rf,test[,-15],type = "prob")[,1]
cm_rf <- confusionMatrix(pred_rf, test$CHURN)
cm_rf
rec_rf <- recall(pred_rf,test$CHURN,relevant=1) #0.75
prec_rf <- precision(pred_rf,test$CHURN,relevant=1) #0.56
f1_rf <- F1_Score(pred_rf,test$CHURN, positive= 1) #0.72
acc_rf <- Accuracy(pred_rf,test$CHURN) #0.69
dec_tree<-rpart(CHURN~.,data = train)
rpart.plot(dec_tree)
summary(dec_tree)
printcp(dec_tree)
#prediction Decision Trees
pred_dt <- rpart.predict(dec_tree,test[,-15],type = "class")
prob_dt <-rpart.predict(dec_tree,test[,-15],type = "prob")[,1]
cm_dt<-confusionMatrix(pred_dt,test$CHURN)
rec_dt <- recall(pred_dt,test$CHURN,relevant=1) #0.71
prec_dt <- precision(pred_dt,test$CHURN,relevant=1) #0.55
f1_dt <- F1_Score(pred_dt,test$CHURN, positive = 1) #0.71
acc_dt <- Accuracy(pred_dt,test$CHURN) #0.67
naive <- naiveBayes(CHURN~.,data = train)
#prediction Naive Bayes
pred_naive <- predict(naive,test[,-15])
prob_naive <- rpart.predict(naive,test[,-15], type = "raw")[,1]
cm_nb<-confusionMatrix(test$CHURN,pred_naive)
cm_nb
rec_nb <- recall(pred_naive,test$CHURN,relevant=1)# 0.39
prec_nb <- precision(pred_naive,test$CHURN,relevant=1)#0.65
f1_nb <- F1_Score(pred_naive,test$CHURN, positive = 1)#0.78
acc_nb <- Accuracy(pred_naive,test$CHURN) #0.69
#4.LOGISTIC REGRESSION
gl <- glm(CHURN ~ ., train, family = "binomial")
summary(gl)
#prediction Logistic Regression
p1 = predict(gl, test)
pred1 = if_else(p1>0.5,1,0)
table_gl = table(pred1, test$CHURN)
pred1 <- as.factor(pred1)
confusionMatrix(table_gl)
log<-train(CHURN~.,data = train,method = "glm")
prob_log<-predict(log,test[,-15],type="prob")[,1]
#evaluate
rec_glm <- recall(pred1, test$CHURN, relevant = "1") #0.38
prec_glm <- precision(pred1, test$CHURN, relevant = "1") # 0.85
f1_glm <- F1_Score(pred1 ,test$CHURN,positive = '1') # 0.53
acc_glm <- Accuracy(pred1, test$CHURN) #0.57
bag <- bagging(CHURN~.,data = train, nbagg=25)
pred_bag<-predict(bag, test[,-15])
prob_bag <- rpart.predict(bag, test[,-15], type="prob")[,1]
cm_bag<-confusionMatrix(pred_bag, test$CHURN)
rec_bag <- recall(pred_bag, test$CHURN,relevant=1) #0.73
prec_bag <-  precision(pred_bag,test$CHURN, relevant=1) #0.54
f1_bag <- F1_Score(pred_bag, test$CHURN, positive = 1) #0.70
acc_bag <- Accuracy(pred_bag, test$CHURN) #0.67
measure_matrix=matrix(0,ncol = 4,nrow = 5)
colnames(measure_matrix) <- c("Recall","Precision","F1_Score","Accuracy")
rownames(measure_matrix) <- c("Random forest","Decision trees",
"Logistic regression","Naive bayes","Bagging")
measure_matrix[1,] <- c(rec_rf,prec_rf,f1_rf,acc_rf)
measure_matrix[2,] <- c(rec_dt,prec_dt,f1_dt,acc_dt)
measure_matrix[3,] <- c(rec_glm,prec_glm,f1_glm,acc_glm)
measure_matrix[4,] <- c(rec_nb,prec_nb,f1_nb,acc_nb)
measure_matrix[5,] <- c(rec_bag,prec_bag,f1_bag,acc_bag)
measure_df <- as.data.frame(measure_matrix)
#ACCURACY PLOT:
accuracy_df <- as.data.frame(cbind(rownames(measure_df),measure_df$Accuracy))
colnames(accuracy_df) <- c("Method","Value")
plot_accuracy<-ggplot(accuracy_df,aes(x=Method,y=Value,fill=Method)) +
geom_bar(stat = "identity") + scale_fill_brewer(palette = "Reds")+
ggtitle("ACCURACY PLOT")+
theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(panel.border = element_blank())+theme(panel.background = element_blank())+theme(axis.line = element_line(colour = "black"))
plot_accuracy #da aggiustare e fare più carino
#F1-score PLOT:
F1_score_df <- as.data.frame(cbind(rownames(measure_df),measure_df$F1_Score))
colnames(F1_score_df) <- c("Method","Value")
plot_f1<-ggplot(F1_score_df,aes(x=Method,y=Value,fill=Method)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Reds")+
ggtitle("F1 SCORE PLOT")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(panel.border = element_blank())+
theme(panel.background = element_blank())+
theme(axis.line = element_line(colour = "black"))
plot_f1
#ROC CURVES:
roc_rf <- roc(test$CHURN ~ as.numeric(unlist(pred_rf)),plot=T,
print.auc=TRUE,col="blue",lwd =4,legacy.axes=TRUE)
roc_nb <- roc(test$CHURN ~ as.numeric(unlist(pred_naive)),plot=TRUE,
print.auc=TRUE,col="green",lwd = 4,print.auc.y=0.1,
legacy.axes=TRUE,add = TRUE)
roc_log <- roc(test$CHURN ~ as.numeric(unlist(pred1)),plot=TRUE,
print.auc=TRUE,col="red",lwd = 4,print.auc.y=0.3,
legacy.axes=TRUE,add = TRUE)
roc_dt <- roc(test$CHURN ~ as.numeric(unlist(pred_dt)),plot=TRUE,
print.auc=TRUE,col="cyan",lwd = 4,print.auc.y=0.4,
legacy.axes=TRUE,add = TRUE)
roc_bag <- roc(test$CHURN ~ as.numeric(unlist(pred_bag)),plot=TRUE,
print.auc=TRUE,col="orange",lwd = 4,print.auc.y=0.2,
legacy.axes=TRUE,add = TRUE)
legend("right",legend=c("RF", "LOG", "DT", "NB","BAG"),fill =c("blue","red", "cyan", "green", "orange"),
cex = .75, inset = .1, bty = "n")
lift_class <- as.data.frame(cbind(prob_bag, prob_dt, prob_naive, prob_rf, prob_log))
lift_class <- cbind(lift_class, test$CHURN)
colnames(lift_class)[6]="churn"
lift_bag <- gain_lift(data = lift_class, score ="prob_bag" , target = "churn" )
library(funModeling)
## compute distribution
df1_persone_codfid_ld <- df_1_persone %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
dplyr::summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = `substring(LAST_DT_ACTIVE, 1, 7)`)
## compute distribution
df1_p_codfid_ld <- df_1_persone %>%
group_by(substring(LAST_DT_ACTIVE,1,4)) %>%
dplyr::summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Year = `substring(LAST_DT_ACTIVE, 1, 4)`)
## compute distribution
df_2_p_emailprovider <- df_2_persone %>%
group_by(EMAIL_PROVIDER) %>%
summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
as.data.frame()
install.packages("gains")
library(gains)
detach("package:funModeling", unload = TRUE)
lift_bag_az <- gain_lift(data = lift_class_az, score ="prob_bag_az" , target = "churn" )
function(gain_lift)
stop()
View(df_2_p)
View(df_7_persone)
#aggiustare grafici
df_7_p <- df_7_persone %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
View(df_7_p)
View(df_7_p)
View(df_7_p)
library(carData)
View(df_7_p)
write.table(df_7_p, "df_7_p.csv",
sep = ";",             # punto e virgola
row.names = TRUE,     # se abbiamo la variabile ID
dec = ".",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
write.table(df_7_p, "df_7_p.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ".",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
df_7_a<- df_7_aziende %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
library(carData)
write.table(df_7_a, "df_7_a.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ".",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
print(tree_rf)
tree_rf <- randomForest(CHURN~.,data=train,ntree=100, importance=TRUE)
rpart.plot(dec_tree)
summary(dec_tree)
plot_accuracy #da aggiustare e fare più carino
library(funModeling)
lift_bag_az <- gain_lift(data = lift_class_az, score ="prob_bag_az" , target = "churn" )
print(tree_rf_az)
acc_rf_az <- Accuracy(pred_rf_az,train_az$CHURN)
RFM_aziende_1_plot
View(RFM_aziende_1)
View(RFM_1)
View(RFM_TOT_persone_1)
View(RFM_aziende_1)
library(dplyr)
library(ggplot2)
library(scales)
library(randomForest)
library(ipred)
library(pROC)
library(forcats)
library(lubridate)
library(ggthemes)
library(RQuantLib)
library(rpart)
library(caret)
library(rpart.plot)
library(MLmetrics)
library(e1071)
df_pers$SCONTO[is.na(df_pers$SCONTO)] <- 0
df_pers <- df_7_persone
df_pers$SCONTO[is.na(df_pers$SCONTO)] <- 0
summary(df_pers)
df_7_a<- df_pers %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
library(carData)
df_7_p <- df_pers %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
library(carData)
write.table(df_7_p, "df_7_p.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ".",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
df_az <- df_7_aziende
df_az$SCONTO[is.na(df_az$SCONTO)] <- 0
df_7_a<- df_az %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
library(carData)
write.table(df_7_a, "df_7_a.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ".",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
summary(df_7_p)
View(df_7_p)
View(df_7_p)
df_7_p[df_7_p$ID_NEG== 42]
stop
O
df_pers$IMPORTO_LORDO[is.na(df_pers$IMPORTO_LORDO)] <- 0
df_7_p <- df_pers %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
write.table(df_7_p, "df_7_p.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ".",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
write.table(df_7_p, "df_7_p.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ",",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
write.table(df_7_a, "df_7_a.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ",",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
df_7_a<- df_az %>% mutate(GUADAGNO = IMPORTO_LORDO - SCONTO)
library(carData)
write.table(df_7_a, "df_7_a.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ",",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
somma_a <- sum(df_7_a$GUADAGNO)
somma_p <- sum(df_7_p$GUADAGNO)
measure_matrix_az =matrix(0,ncol = 2,nrow = 2)
colnames(measure_matrix_az) <- c("guadagno_persone","Guadagno_aziende")
rownames(measure_matrix_az) <- c("aziende","persone")
matrice_guadagno =matrix(0,ncol = 2,nrow = 2)
colnames(measure_matrix_az) <- c("guadagno_persone","Guadagno_aziende")
rownames(measure_matrix_az) <- c("aziende","persone")
View(matrice_guadagno)
rownames(measure_matrix_az) <- c("aziende","persone")
matrice_guadagno =matrix(0,ncol = 2,nrow = 1)
colnames(measure_matrix_az) <- c("guadagno")
matrice_guadagno =matrix(0,ncol = 1,nrow = 2)
colnames(measure_matrix_az) <- c("guadagno")
matrice_guadagno =matrix(0,ncol = 1,nrow = 2)
colnames(matrice_guadagno) <- c("guadagno")
rownames(matrice_guadagno) <- c("aziende","persone")
matrice_guadagno[1,] <- c(somma_a, somma_p)
matrice_guadagno[,1] <- c(somma_a, somma_p)
View(matrice_guadagno)
matrice_guadagno <- as.data.frame(matrice_guadagno)
View(matrice_guadagno)
plot(matrice_guadagno)
write.table(matrice_guadagno, "guad.csv",
sep = ";",             # punto e virgola
row.names = FALSE,     # se abbiamo la variabile ID
dec = ",",             # separatore di decimali
na = "",               # dati mancanti come celle vuote
quote = TRUE
)
View(matrice_guadagno)
options(scipen = 999)
set.seed(123456)
library(dplyr)
library(ggplot2)
library(scales)
library(randomForest)
library(ipred)
library(pROC)
library(forcats)
library(lubridate)
library(ggthemes)
library(RQuantLib)
library(rpart)
library(caret)
library(rpart.plot)
library(MLmetrics)
library(e1071)
library(funModeling)
#informazioni carta fedeltà di ciascun cliente
df_1_cli_fid <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_1_cli_fid.csv", sep=";", na.strings = c("NA", ""))
df_1_cli_fid_clean <- df_1_cli_fid
### Check for duplicates (non duplicati per CLI-FID)
df_1_cli_fid_clean %>% summarize(TOT_ID_CLIs = n_distinct(ID_CLI)
, TOT_ID_FIDs = n_distinct(ID_FID)
, TOT_ID_CLIFIDs = n_distinct(paste0(as.character(ID_CLI),"-",as.character(ID_FID)))
, TOT_ROWs = n())
summarize <- dplyr::summarize
df_1_cli_fid_clean <- df_1_cli_fid
### Check for duplicates (non duplicati per CLI-FID)
df_1_cli_fid_clean %>% summarize(TOT_ID_CLIs = n_distinct(ID_CLI)
, TOT_ID_FIDs = n_distinct(ID_FID)
, TOT_ID_CLIFIDs = n_distinct(paste0(as.character(ID_CLI),"-",as.character(ID_FID)))
, TOT_ROWs = n())
### Formattazione delle date
df_1_cli_fid_clean <- df_1_cli_fid_clean %>%
mutate(DT_ACTIVE = as.Date(DT_ACTIVE))
View(df_1_cli_fid_clean)
#informazioni carta fedeltà di ciascun cliente
df_1_cli_fid <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_1_cli_fid.csv", sep=";", na.strings = c("NA", ""))
df_1_cli_fid_clean <- df_1_cli_fid
### Check for duplicates (non duplicati per CLI-FID)
df_1_cli_fid_clean %>% summarize(TOT_ID_CLIs = n_distinct(ID_CLI)
, TOT_ID_FIDs = n_distinct(ID_FID)
, TOT_ID_CLIFIDs = n_distinct(paste0(as.character(ID_CLI),"-",as.character(ID_FID)))
, TOT_ROWs = n())
summarize <- dplyr::summarize
df_1_cli_fid_clean <- df_1_cli_fid
### Check for duplicates (non duplicati per CLI-FID)
df_1_cli_fid_clean %>% summarize(TOT_ID_CLIs = n_distinct(ID_CLI)
, TOT_ID_FIDs = n_distinct(ID_FID)
, TOT_ID_CLIFIDs = n_distinct(paste0(as.character(ID_CLI),"-",as.character(ID_FID)))
, TOT_ROWs = n())
### Formattazione delle date
df_1_cli_fid_clean <- df_1_cli_fid_clean %>%
mutate(DT_ACTIVE = as.Date(DT_ACTIVE))
View(df_1_cli_fid_clean)
options(scipen=999)
set.seed(123456)
#### LIBRARIES ####
library(dplyr)
library(ggplot2)
library(ggthemes)
library(magrittr)
library(pander)
library(tidyverse)
library(wesanderson)
library(forcats)
library(lubridate)
library(RQuantLib)
library(rfm)
library(scales)
library(arules)
library(arulesViz)
library(RColorBrewer)
library(plotly)
library(randomForest)
library(ipred)
library(rpart)
library(pROC)
library(forcats)
library(RQuantLib)
library(caret)
library(rpart.plot)
library(MLmetrics)
library(e1071)
library(funModeling)
#### DIRECTORIES ####
working_dir = "/Users/alessandramaggipinto/Documents/GitHub/Progetto_DigitalM"
data_dir = "/Users/alessandramaggipinto/Documents/DMktg_DSLab_Data_1"
setwd(working_dir)
PIPELINE_scripts <- c(
'B01_ingestion.R'
, 'C01_preparation_df1.R'
, 'C02_preparation_df2.R'
, 'C03_preparation_df3.R'
, 'C04_preparation_df4.R'
, 'C05_preparation_df5.R'
, 'C06_preparation_df6.R'
, 'C07_preparation_df7.R'
, 'D01_preparation_df1_aziende.R'
, 'D02_preparation_df2_aziende.R'
, 'D03_preparation_df3_aziende.R'
, 'D04_preparation_df4_aziende.R'
, 'D05_preparation_df5_aziende.R'
, 'D06_preparation_df6_aziende.R'
, 'D07_preparation_df7_aziende.R'
, 'MBA_persone.R'
, 'MBA_aziende.R'
, 'RFM.R'
, 'RFM_aziende.R'
, 'Churn.R'
, 'Churn_aziende.R'
)
for(i in PIPELINE_scripts){
source(i, echo = TRUE)
}
View(df_1_cli_fid_clean)
View(df_1_aziende)
## compute distribution
df1_aziende_codfid_ld <- df_1_aziende %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
dplyr::summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = substring(LAST_DT_ACTIVE,1,7))
df_1_aziende <- df_1_cli_fid_clean %>%
filter(LAST_COD_FID == 'PREMIUM BIZ' | LAST_COD_FID == 'STANDARD BIZ')
## compute distribution
df1_aziende_codfid_ld <- df_1_aziende %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = substring(LAST_DT_ACTIVE,1,7))
## compute distribution
df1_persone_codfid_ld <- df_1_persone %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
dplyr::summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = `substring(LAST_DT_ACTIVE, 1, 7)`)
df_1_aziende <- df_1_cli_fid_clean %>%
filter(LAST_COD_FID == 'PREMIUM BIZ' | LAST_COD_FID == 'STANDARD BIZ')
View(df_1_aziende)
View(df_1_aziende)
## compute distribution
df1_aziende_codfid_ld <- df_1_aziende %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = substring(LAST_DT_ACTIVE,1,7))
## compute distribution
df1_az_codfid_ld <- df_1_aziende %>%
group_by(substring(LAST_DT_ACTIVE,1,4)) %>%
dplyr::summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)*100) %>%
arrange(desc(PERCENT)) %>%
rename(Year = `substring(LAST_DT_ACTIVE, 1, 4)`)
## compute distribution
df1_persone_codfid_ld <- df_1_persone %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
dplyr::summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = `substring(LAST_DT_ACTIVE, 1, 7)`)
## compute distribution
df1_aziende_codfid_ld <- df_1_aziende %>%
group_by(substring(LAST_DT_ACTIVE,1,7)) %>%
summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT)) %>%
rename(Mesi = `substring(LAST_DT_ACTIVE, 1, 7)`)
options(scipen=999)
set.seed(123456)
#### DIRECTORIES ####
working_dir = "/Users/alessandramaggipinto/Documents/GitHub/Progetto_DigitalM"
data_dir = "/Users/alessandramaggipinto/Documents/DMktg_DSLab_Data_1"
setwd(working_dir)
PIPELINE_scripts <- c(
'B01_ingestion.R'
, 'C01_preparation_df1.R'
, 'C02_preparation_df2.R'
, 'C03_preparation_df3.R'
, 'C04_preparation_df4.R'
, 'C05_preparation_df5.R'
, 'C06_preparation_df6.R'
, 'C07_preparation_df7.R'
, 'D01_preparation_df1_aziende.R'
, 'D02_preparation_df2_aziende.R'
, 'D03_preparation_df3_aziende.R'
, 'D04_preparation_df4_aziende.R'
, 'D05_preparation_df5_aziende.R'
, 'D06_preparation_df6_aziende.R'
, 'D07_preparation_df7_aziende.R'
, 'MBA_persone.R'
, 'MBA_aziende.R'
, 'RFM.R'
, 'RFM_aziende.R'
, 'Churn.R'
, 'Churn_aziende.R'
)
for(i in PIPELINE_scripts){
source(i, echo = TRUE)
}
options(scipen=999)
set.seed(123456)
options(scipen=999)
set.seed(123456)

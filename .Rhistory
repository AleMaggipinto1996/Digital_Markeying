options(scipen=999)
set.seed(123456)
#### LIBRARIES ####
library(dplyr)
library(magrittr)
library(ggplot2)
library(forcats)
library(lubridate)
library(RQuantLib)
#### DIRECTORIES ####
getwd()
working_dir = "C:/Users/Utente/Desktop/Web_marketing/Script"
data_dir = "C:/Users/Utente/Desktop/Web_marketing/Data"
setwd(working_dir)
PIPELINE_scripts <- c(
'B01_ingestion.R'
, 'C01_preparation_df1.R'
, 'C02_preparation_df2.R'
, 'C03_preparation_df3.R'
, 'C04_preparation_df4.R'
, 'C05_preparation_df5.R'
, 'C06_preparation_df6.R'
, 'C07_preparation_df7.R'
## add other scripts
)
for(i in PIPELINE_scripts){
source(i, echo = TRUE)
}
df_1_cli_fid <- read.csv2(
file.path(data_dir,"raw_1_cli_fid.csv")
, na.strings = c("NA", "")
)
#### INGESTION df_2 customers accounts details ####
df_2_cli_account <- read.csv2(
file.path(data_dir,"raw_2_cli_account.csv")
, na.strings = c("NA", "")
)
#### INGESTION df_3 customers addresses ####
df_3_cli_address <- read.csv2(
file.path(data_dir,"raw_3_cli_address.csv")
, na.strings = c("")
)
#### INGESTION df_4 customers privacy data ####
df_4_cli_privacy <- read.csv2(
file.path(data_dir,"raw_4_cli_privacy.csv")
, na.strings = c("NA", "")
)
options(scipen = 999)
set.seed(123456)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(magrittr)
library(pander)
library(tidyverse)
library(wesanderson)
library(forcats)
library(lubridate)
library(RQuantLib)
library(rfm)
#informazioni carta fedeltÃ  di ciascun cliente
df_1_cli_fid <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_1_cli_fid.csv", sep=";", na.strings = c("NA", ""))
#informazioni account cliente
df_2_cli_account <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_2_cli_account.csv", sep=";", na.strings = c("NA", ""))
#indirizzo cliente
df_3_cli_address <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_3_cli_address.csv", sep=";", na.strings = c(""))
#privacy clienti
df_4_cli_privacy <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_4_cli_privacy.csv", sep=";", na.strings = c("NA", ""))
#email campaign
df_5_camp_cat <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_5_camp_cat.csv", sep=";", na.strings = c("NA", ""))
#email events
df_6_camp_event <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_6_camp_event.csv", sep=";", na.strings = c("NA", ""))
#operazioni acquisto/rimborso di ogni cliente
df_7_tic <- read.csv2("~/Documents/DMktg_DSLab_Data_1/raw_7_tic.csv", na.strings = c("NA", ""), stringsAsFactors = FALSE)
df_1_cli_fid_clean <- df_1_cli_fid
### Check for duplicates (non duplicati per CLI-FID)
df_1_cli_fid_clean %>% summarize(TOT_ID_CLIs = n_distinct(ID_CLI)
, TOT_ID_FIDs = n_distinct(ID_FID)
, TOT_ID_CLIFIDs = n_distinct(paste0(as.character(ID_CLI),"-",as.character(ID_FID)))
, TOT_ROWs = n())
### Formattazione delle date
df_1_cli_fid_clean <- df_1_cli_fid_clean %>%
mutate(DT_ACTIVE = as.Date(DT_ACTIVE))
### Formattazione boleani in fattori ##
df_1_cli_fid_clean <- df_1_cli_fid_clean %>%
mutate(TYP_CLI_FID = as.factor(TYP_CLI_FID)) %>%
mutate(STATUS_FID = as.factor(STATUS_FID))
num_fid_x_cli <- df_1_cli_fid_clean %>%
group_by(ID_CLI) %>%
summarize(NUM_FIDs =  n_distinct(ID_FID)
, NUM_DATEs = n_distinct(DT_ACTIVE)
)
tot_id_cli <- n_distinct(num_fid_x_cli$ID_CLI)
## compute the distribution of number of subscriptions
dist_num_fid_x_cli <- num_fid_x_cli %>%
group_by(NUM_FIDs, NUM_DATEs) %>%
summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT_CLIs = TOT_CLIs/tot_id_cli)
df_1_cli_fid_first <- df_1_cli_fid_clean %>%
group_by(ID_CLI) %>%
filter(DT_ACTIVE == min(DT_ACTIVE)) %>%
arrange(ID_FID) %>%
filter(row_number() == 1) %>%
ungroup() %>%
as.data.frame()
df_1_cli_fid_last <- df_1_cli_fid_clean %>%
group_by(ID_CLI) %>%
filter(DT_ACTIVE == max(DT_ACTIVE)) %>%
arrange(desc(ID_FID)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
as.data.frame()
df_1_cli_fid_clean <- df_1_cli_fid_last %>%
select(ID_CLI
, ID_FID
, LAST_COD_FID = COD_FID
, LAST_TYP_CLI_FID = TYP_CLI_FID
, LAST_STATUS_FID = STATUS_FID
, LAST_DT_ACTIVE = DT_ACTIVE) %>%
left_join(df_1_cli_fid_first %>%
select(ID_CLI
, FIRST_ID_NEG = ID_NEG
, FIRST_DT_ACTIVE = DT_ACTIVE)
, by = 'ID_CLI') %>%
left_join(num_fid_x_cli %>%
select(ID_CLI
, NUM_FIDs) %>%
mutate(NUM_FIDs = as.factor(NUM_FIDs))
, by = 'ID_CLI')
RegOnline <- as.data.frame(df_1_cli_fid_clean$FIRST_ID_NEG)
colnames(RegOnline)<- "RegOnline"
RegOnline <- RegOnline %>% mutate(RegOnline = as.factor(if_else(RegOnline!= 1, "0", as.character(RegOnline))))
df_1_cli_fid_clean$RegOnline <- RegOnline$RegOnline
## come si distribuiscono i nostri clienti
df1_dist_codfid <- df_1_cli_fid_clean %>%
group_by(LAST_COD_FID) %>%
summarize(TOT_CLIs = n_distinct(ID_CLI)) %>%
mutate(PERCENT = TOT_CLIs/sum(TOT_CLIs)) %>%
arrange(desc(PERCENT))
df_1_aziende <- df_1_cli_fid_clean %>%
filter(LAST_COD_FID == 'PREMIUM BIZ' | LAST_COD_FID == 'STANDARD BIZ')
df_1_persone <- df_1_cli_fid_clean %>%
filter(LAST_COD_FID == 'PREMIUM' | LAST_COD_FID == 'STANDARD')
df_2_cli_account_clean <- df_2_cli_account
## check for duplicates
df_2_cli_account_clean %>%
summarize(TOT_ID_CLIs = n_distinct(ID_CLI)
, TOT_ROWs = n())
## format boolean as factor ##
df_2_cli_account_clean <- df_2_cli_account_clean %>%
mutate(W_PHONE = as.factor(W_PHONE))
## format numerical categories as factor ##
df_2_cli_account_clean <- df_2_cli_account_clean %>%
mutate(TYP_CLI_ACCOUNT = as.factor(TYP_CLI_ACCOUNT))
## MISSING VALUES mapped as natural values ##
df_2_cli_account_clean <- df_2_cli_account_clean %>%
mutate(W_PHONE = fct_explicit_na(W_PHONE, "0"))
## MISSING VALUES mapped as new level in categorical columns ##
df_2_cli_account_clean <- df_2_cli_account_clean %>%
mutate(EMAIL_PROVIDER = fct_explicit_na(EMAIL_PROVIDER, "(missing)")) %>%
mutate(TYP_JOB = fct_explicit_na(TYP_JOB, "(missing)"))
df_1_cli_fid_clean <- df_1_cli_fid_last %>%
select(ID_CLI
, ID_FID
, LAST_COD_FID = COD_FID
, LAST_TYP_CLI_FID = TYP_CLI_FID
, LAST_STATUS_FID = STATUS_FID
, LAST_DT_ACTIVE = DT_ACTIVE) %>%
left_join(df_1_cli_fid_first %>%
select(ID_CLI
, FIRST_ID_NEG = ID_NEG
, FIRST_DT_ACTIVE = DT_ACTIVE)
, by = 'ID_CLI') %>%
left_join(num_fid_x_cli %>%
select(ID_CLI
, NUM_FIDs) %>%
mutate(NUM_FIDs = as.factor(NUM_FIDs))
, by = 'ID_CLI')
df_1_cli_fid_last <- df_1_cli_fid_clean %>%
group_by(ID_CLI) %>%
filter(DT_ACTIVE == max(DT_ACTIVE)) %>%
arrange(desc(ID_FID)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
as.data.frame()
